                                Snowflake Realtime Training 
								        Session-4
								--------------------------
								CRUD 
								C - Create 
								R - Read 
								U - Update 
								D - Delete 
								
			
update : 

Windows functions: 



TASK:  
   String functions   --> 10 
   number functions  -->  10 

class recording --> https://youtu.be/wZkqGgYhWa0

   age = 20 

   if (age >=18) 
      print(vote)
   else 
     print (vote)   
	 
	 
	 
	 CASE when age >= 10  then "eligble "  else "not eligible" end 
	 
	 
	 
crate table called   test 

amount    int 

amount 
---
-100
100
200
300
400
-10
-20

output 
amount     status 
------ ------------
-100     loss
100      profit
200      profit 
300
400
-10
-20



Rank()
denseRank()
row_number()


  

------------------------

use database hr;


select * from employees


update employees 
     set first_name = 'Sreekanth'
     where employee_id = 101


update employees 
     set first_name = 'Sreekanth'
        ,last_name = 'G'
    where employee_id = 101 


------------------
select * from employees where  manager_id = 100 


update employees 
     set manager_id =  null
    where manager_id = 100 


update employees 
     set manager_id =  100 
    where manager_id is null  

    
------------------
employees 
employees_v1   



desc table employees

select * from employee_v1 

create table employee_v1 as (
select * from employees
)

create table employee_v2 as (
select employee_id ,first_name , salary,phone_number from employees
)

--drop table employee_v2;


create or replace table employee_v2 as (
select employee_id ,first_name , salary from employees
)

delete from employees



CREATE TABLE dependents (
	dependent_id INT IDENTITY(1,1) PRIMARY KEY,
	first_name VARCHAR (50) NOT NULL,
	last_name VARCHAR (50) NOT NULL,
	relationship VARCHAR (25) NOT NULL,
	employee_id INT NOT NULL

    )

INSERT INTO dependents(dependent_id,first_name,last_name,relationship,employee_id) VALUES (1,'Penelope','Gietz','Child',206);
INSERT INTO dependents(dependent_id,first_name,last_name,relationship,employee_id) VALUES (2,'Nick','Higgins','Child',205);
INSERT INTO dependents(dependent_id,first_name,last_name,relationship,employee_id) VALUES (3,'Ed','Whalen','Child',200);
INSERT INTO dependents(dependent_id,first_name,last_name,relationship,employee_id) VALUES (4,'Jennifer','King','Child',100);
INSERT INTO dependents(dependent_id,first_name,last_name,relationship,employee_id) VALUES (5,'Johnny','Kochhar','Child',101);
INSERT INTO dependents(dependent_id,first_name,last_name,relationship,employee_id) VALUES (6,'Bette','De Haan','Child',102);
INSERT INTO dependents(dependent_id,first_name,last_name,relationship,employee_id) VALUES (7,'Grace','Faviet','Child',109);
INSERT INTO dependents(dependent_id,first_name,last_name,relationship,employee_id) VALUES (8,'Matthew','Chen','Child',110);
INSERT INTO dependents(dependent_id,first_name,last_name,relationship,employee_id) VALUES (9,'Joe','Sciarra','Child',111);
INSERT INTO dependents(dependent_id,first_name,last_name,relationship,employee_id) VALUES (10,'Christian','Urman','Child',112);
INSERT INTO dependents(dependent_id,first_name,last_name,relationship,employee_id) VALUES (11,'Zero','Popp','Child',113);
INSERT INTO dependents(dependent_id,first_name,last_name,relationship,employee_id) VALUES (12,'Karl','Greenberg','Child',108);
INSERT INTO dependents(dependent_id,first_name,last_name,relationship,employee_id) VALUES (13,'Uma','Mavris','Child',203);
INSERT INTO dependents(dependent_id,first_name,last_name,relationship,employee_id) VALUES (14,'Vivien','Hunold','Child',103);
INSERT INTO dependents(dependent_id,first_name,last_name,relationship,employee_id) VALUES (15,'Cuba','Ernst','Child',104);
INSERT INTO dependents(dependent_id,first_name,last_name,relationship,employee_id) VALUES (16,'Fred','Austin','Child',105);
INSERT INTO dependents(dependent_id,first_name,last_name,relationship,employee_id) VALUES (17,'Helen','Pataballa','Child',106);
INSERT INTO dependents(dependent_id,first_name,last_name,relationship,employee_id) VALUES (18,'Dan','Lorentz','Child',107);
INSERT INTO dependents(dependent_id,first_name,last_name,relationship,employee_id) VALUES (19,'Bob','Hartstein','Child',201);
INSERT INTO dependents(dependent_id,first_name,last_name,relationship,employee_id) VALUES (20,'Lucille','Fay','Child',202);
INSERT INTO dependents(dependent_id,first_name,last_name,relationship,employee_id) VALUES (21,'Kirsten','Baer','Child',204);
INSERT INTO dependents(dependent_id,first_name,last_name,relationship,employee_id) VALUES (22,'Elvis','Khoo','Child',115);
INSERT INTO dependents(dependent_id,first_name,last_name,relationship,employee_id) VALUES (23,'Sandra','Baida','Child',116);
INSERT INTO dependents(dependent_id,first_name,last_name,relationship,employee_id) VALUES (24,'Cameron','Tobias','Child',117);
INSERT INTO dependents(dependent_id,first_name,last_name,relationship,employee_id) VALUES (25,'Kevin','Himuro','Child',118);
INSERT INTO dependents(dependent_id,first_name,last_name,relationship,employee_id) VALUES (26,'Rip','Colmenares','Child',119);
INSERT INTO dependents(dependent_id,first_name,last_name,relationship,employee_id) VALUES (27,'Julia','Raphaely','Child',114);
INSERT INTO dependents(dependent_id,first_name,last_name,relationship,employee_id) VALUES (28,'Woody','Russell','Child',145);
INSERT INTO dependents(dependent_id,first_name,last_name,relationship,employee_id) VALUES (29,'Alec','Partners','Child',146);
INSERT INTO dependents(dependent_id,first_name,last_name,relationship,employee_id) VALUES (30,'Sandra','Taylor','Child',176);


select top 3 * from dependents;

delete from dependents

---emp id should present in both the tables 

select  employee_id from dependents;

select  first_name as "FName" from dependents;

select count(*) as "TotalRows" from dependents

select * from employees  where employee_id in (
   select  employee_id from dependents
  -- 206 ,205 ,100
)


select * from employees  where employee_id not in (
   select  employee_id from dependents
  -- 206 ,205 ,100
)




select * from employees order by salary desc;

------based salary jr or senior   -- designation   10K  jr sr 
 
select employee_id ,
       first_name,
       salary ,
       case when salary < 10000 then 'Jr Software' else 'Sr Software ' end  as "designation"
      -- CASE when age >= 10  then "eligble "  else "not eligible" end 
       from employees


select email from employees


select upper(email) from employees


select substr(email,1,10) from employees

select current_timestamp() 

select substr(current_timestamp(),1,10 )



select distinct salary,first_name from employees







select employee_id , first_name , salary 
      , row_number() over(order by salary desc ) as rid
        
from employees


select employee_id , first_name , salary 
      , rank() over(order by salary desc ) as rid
from employees


select employee_id , first_name , salary 
      , dense_rank() over(order by salary desc ) as rid
        
from employees 


















